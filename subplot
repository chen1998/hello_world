fig, (ax1, ax2, ax3) = plt.subplots(3, 1, sharex=True, figsize=(10, 8))
        for cl,ix,ax,name in zip(["DOLX","DOLY","Delta_CD"],range(1,4,1),[ax1, ax2, ax3],["DOLX","DOLY","DCD"]) :
            XP,YP = point_clean(FD,ixl,[v for v in FD[cl]],fix10)
            #print(YP)
            ax.plot(XP,YP, label=name, color=colors[ix])
            ax.scatter(XP,YP,color=colors[ix] ) #label = rowdata['SCAN'][ix]
            for judge in [-0.4,0.4,-0.6,0.6]:
                ax.axhline(judge, color='r', linestyle='--', label='Judge Line -%s'%str(judge))
            ax.axis(ymin =-2  , ymax =2)
colors = ['red', 'blue', 'green', 'orange', 'purple', 'brown', 'pink', 'gray', 'yellow', 'cyan', 'lightblue', 'lightcoral', 'lightgreen', 'lightpink', 'lavender', 'rosybrown']


        POINT              X              Y   LENS CHIP   SCAN
1        1 -887238.350164  706009.912501     M6    1  SCAN9
2        2 -887238.839033  658422.850732  M5_M6    1  SCAN9
3        3 -887239.740264  635580.790243     M5    1  SCAN9
4        4 -887238.397391  553095.411068  M4_M5    1  SCAN9
5        5 -887238.678054  530253.444913     M4    1  SCAN9
6        6 -887239.171815  447768.851578  M3_M4    1  SCAN9
7        7 -887237.925300  424926.784639     M3    1  SCAN9
8        8 -887238.895892  342441.910593  M2_M3    1  SCAN9
9        9 -887238.008274  319600.092223     M2    1  SCAN9
10      10 -887237.776489  273916.219230     M2    1  SCAN9
11      11 -658183.850663  706009.853305     M6    2  SCAN9
12      12 -658183.598945  658422.924615  M5_M6    2  SCAN9
13      13 -658183.448631  635580.944370     M5    2  SCAN9
14      14 -658182.137753  553095.365637  M4_M5    2  SCAN9

[659168.0, 659168.0, 642368.0, 642368.0, 554168.0, 554168.0, 537368.0, 537368.0, 449168.0, 449168.0, 432368.0, 432368.0, 344168.0, 344168.0, 327368.0, 327368.0]
List1 = [659168.0, 659168.0, 642368.0, 642368.0, 554168.0, 554168.0, 537368.0, 537368.0, 449168.0, 449168.0, 432368.0, 432368.0, 344168.0, 344168.0, 327368.0, 327368.0]

# 将List1转换为NumPy数组
arr = np.array(List1)

# 正则化到[0, 1]之间
min_val = arr.min()
max_val = arr.max()
normalized_arr = (arr - min_val) / (max_val - min_val)

# 将正则化的值映射到[1, 10]
normalized_list1 = 1 + normalized_arr * 9

print(normalized_list1)

df如下
    POINT              X              Y   LENS CHIP   SCAN
1       1 -887238.350164  706009.912501     M6    1  SCAN9
2       2 -887238.839033  658422.850732  M5_M6    1  SCAN9
3       3 -887239.740264  635580.790243     M5    1  SCAN9
4       4 -887238.397391  553095.411068  M4_M5    1  SCAN9
5       5 -887238.678054  530253.444913     M4    1  SCAN9
6       6 -887239.171815  447768.851578  M3_M4    1  SCAN9
7       7 -887237.925300  424926.784639     M3    1  SCAN9
8       8 -887238.895892  342441.910593  M2_M3    1  SCAN9
9       9 -887238.008274  319600.092223     M2    1  SCAN9
10     10 -887237.776489  273916.219230     M2    1  SCAN9

將Y軸正則在[1,len(df)-1],畫散點圖x軸為[-10,10]*int(len(正則y list)/2),Y軸為正則y list
每點label為[LENS]


normalized_y = np.linspace(1, len(df) - 1, len(df))

# 创建坐标图
plt.scatter([-10, 10] * int(len(normalized_y) / 2), normalized_y, color='blue', marker='o')

# 添加点的标签
for i, txt in enumerate(df['LENS']):
    plt.annotate(txt, ([-10, 10] * int(len(normalized_y) / 2))[i], textcoords="offset points", xytext=(0, 5), ha='center')

# 添加坐标轴标签
plt.xlabel('X Coordinate')
plt.ylabel('Normalized Y Coordinate')

# 添加标题
plt.title('Scatter Plot with Normalized Y-axis')

# 显示绘制的图
plt.show()


colors_contrast = ['Red', 'Cyan', 'Orange', 'Teal', 'Yellow', 'Blue', 'Green', 'Magenta', 
                   'Indigo', 'Olive', 'Violet', 'Coral', 'Pink', 'Peach', 'Brown', 'Plum', 
                   'Maroon', 'Charcoal', 'Cyan', 'Turquoise', 'Silver', 'Lavender', 'Gray', 'Beige']



 Y       CD1
1    -38526.998738  3.093782
2    -50407.147318  2.951508
3    -62286.795895  2.895177
4    -74166.718656  2.834749
5    -86046.360971  2.846877
6    -97926.950127  2.797668
7   -109806.551648  2.820599
8   -121686.693935  2.803926
9   -133566.853871  2.801675
10  -145446.685002  2.813953
11  -157326.550843  2.801056
12  -169206.026948  2.789671
13  -181085.608719  2.822719
14  -192965.652557  2.807555
15  -204845.647618  2.794286
16  -216725.743984  2.765812
17  -228605.901460  2.765821
18  -240486.161120  2.799364
19  -252366.489501  2.816940
20  -264246.223697  2.806194
...
333 -679048.462998  2.629551
334 -690928.732279  2.626972
335 -702808.882392  2.647588
將上述兩列轉換為矩陣後匯入plt.plot畫散點圖
x軸為Y列,Y軸為cd1列
y軸的上下線為去掉最大最小值的平均值正負一
軸刻度分割成20份顯示

